{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport * as THREE from 'three';\nimport texture1 from './circle.png';\nexport default function Threejs() {\n  _s();\n\n  useEffect(() => {\n    let sizes = {\n      width: window.innerWidth,\n      height: window.innerHeight\n    }; // CREATE SCENE\n\n    const scene = new THREE.Scene(); // CREATE GEOMETRY FROM CUSTOM POINTS\n\n    let particles = [];\n    const particleCount = 20000;\n\n    for (let i = 0; i < particleCount; i++) {\n      var vertex = new THREE.Vector3();\n      vertex.x = Math.random() * 2000 - 1000;\n      vertex.y = Math.random() * 2000 - 1000;\n      vertex.z = Math.random() * 2000 - 1000;\n      particles.push(vertex);\n    }\n\n    const geometry = new THREE.SphereGeometry(1000, 1000, 100); // MATERIAL WITH IMPORTED TEXTURE\n\n    const texture = new THREE.TextureLoader().load(texture1);\n    const material = new THREE.PointsMaterial({\n      size: 20,\n      depthTest: false,\n      //for transparent png\n      transparent: true,\n      //for transparent png\n      fog: false,\n      map: texture\n    }); // MESH\n\n    const mesh = new THREE.Points(geometry, material);\n    mesh.scale.set(1, 1, 1);\n    scene.add(mesh); // LIGHTS\n\n    const pointLight = new THREE.PointLight(0xffffff, 0.1);\n    pointLight.position.x = 2;\n    pointLight.position.y = 3;\n    pointLight.position.z = 1000;\n    scene.add(pointLight); // CAMERA\n\n    const fieldOfView = 75;\n    const aspectRatio = sizes.width / sizes.height;\n    const nearPlane = 1;\n    const farPlane = 3000;\n    const camera = new THREE.PerspectiveCamera(fieldOfView, aspectRatio, nearPlane, farPlane);\n    camera.position.x = 0;\n    camera.position.y = 0;\n    camera.position.z = farPlane / 3;\n    scene.add(camera); // ADD CAMERA CONTROLS\n\n    const OrbitControls = require('three-orbit-controls')(THREE);\n\n    const controls = new OrbitControls(camera); // RENDERER\n\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(sizes.width, sizes.height); // FRONT-END PART\n\n    let container = document.getElementById('webgl-canvas');\n    container.style.width = '100%';\n    container.style.height = '100vh';\n    container.style.overflow = 'hidden'; // ADD RENDERER TO CONTAINER\n\n    container.appendChild(renderer.domElement); // ANIMATIONS GO INSIDE\n\n    function render() {\n      camera.lookAt(scene.position);\n      renderer.render(scene, camera);\n    }\n\n    function animate() {\n      requestAnimationFrame(animate);\n      render();\n    }\n\n    animate(); // RESIZE CONTAINER\n\n    window.addEventListener('resize', onWindowResize, false);\n\n    function onWindowResize() {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n  }, []);\n  return null;\n}\n\n_s(Threejs, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Threejs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Threejs\");","map":{"version":3,"sources":["/Users/bernardoagbranco/react-threejs/react-threejs-buffer-geometry/src/components/Threejs.js"],"names":["useEffect","THREE","texture1","Threejs","sizes","width","window","innerWidth","height","innerHeight","scene","Scene","particles","particleCount","i","vertex","Vector3","x","Math","random","y","z","push","geometry","SphereGeometry","texture","TextureLoader","load","material","PointsMaterial","size","depthTest","transparent","fog","map","mesh","Points","scale","set","add","pointLight","PointLight","position","fieldOfView","aspectRatio","nearPlane","farPlane","camera","PerspectiveCamera","OrbitControls","require","controls","renderer","WebGLRenderer","setPixelRatio","devicePixelRatio","setSize","container","document","getElementById","style","overflow","appendChild","domElement","render","lookAt","animate","requestAnimationFrame","addEventListener","onWindowResize","aspect","updateProjectionMatrix"],"mappings":"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","sourcesContent":["\nimport {useEffect} from 'react'\nimport * as THREE from 'three';\nimport texture1 from './circle.png'\n\nexport default function Threejs(){\n\nuseEffect(() => {\n\n\t\tlet sizes = {\n\t\t\twidth: window.innerWidth,\n\t\t\theight: window.innerHeight\n\t\t}\n\t\t  \n\t\t// CREATE SCENE\n\t\tconst scene = new THREE.Scene();\n\t\t\n\t\t// CREATE GEOMETRY FROM CUSTOM POINTS\n\t\tlet particles = [];\n\t\tconst particleCount = 20000;\n\n\t\tfor (let i = 0; i < particleCount; i++) {\n\t\t\tvar vertex = new THREE.Vector3();\n\t\t\tvertex.x = Math.random() * 2000 - 1000;\n\t\t\tvertex.y = Math.random() * 2000 - 1000;\n\t\t\tvertex.z = Math.random() * 2000 - 1000;\n\t\t\tparticles.push(vertex);\n\t\t}\n\n\t\tconst geometry = new THREE.SphereGeometry(1000,1000,100);\n\n\t\t// MATERIAL WITH IMPORTED TEXTURE\n\t\tconst texture = new THREE.TextureLoader().load(texture1);\n\t\tconst material = new THREE.PointsMaterial( {\n\t\t\tsize:20,\n\t\t\tdepthTest:false, //for transparent png\n\t\t\ttransparent:true, //for transparent png\n\t\t\tfog: false,\n\t\t\tmap: texture\n\t\t} );\n\n\t\t// MESH\n\t\tconst mesh = new THREE.Points( geometry, material );\n\t\tmesh.scale.set( 1, 1, 1 );\n\t\tscene.add(mesh);\n\n\t\t// LIGHTS\n\t\tconst pointLight = new THREE.PointLight(0xffffff, 0.1)\n\t\tpointLight.position.x = 2\n\t\tpointLight.position.y = 3\n\t\tpointLight.position.z = 1000\n\t\tscene.add(pointLight)\n\n\t\t// CAMERA\n        const fieldOfView = 75;\n        const aspectRatio = sizes.width / sizes.height;\n        const nearPlane = 1;\n\t\tconst farPlane = 3000;\n\n\t\tconst camera = new THREE.PerspectiveCamera(fieldOfView, aspectRatio, nearPlane, farPlane);\n\t\tcamera.position.x = 0;\n\t\tcamera.position.y = 0;\n\t\tcamera.position.z = farPlane/3;\n\t\tscene.add(camera)\n\n\t\t// ADD CAMERA CONTROLS\n\t\tconst OrbitControls = require('three-orbit-controls')(THREE)\n        const controls = new OrbitControls(camera)\n\n\t\t// RENDERER\n\t\tconst renderer = new THREE.WebGLRenderer(); \n\t\trenderer.setPixelRatio(window.devicePixelRatio); \n\t\trenderer.setSize(sizes.width, sizes.height); \n\n\t\t// FRONT-END PART\n\t\tlet container = document.getElementById('webgl-canvas');\n\t\tcontainer.style.width = '100%';\n\t\tcontainer.style.height = '100vh';\n\t\tcontainer.style.overflow = 'hidden';\n\n\t\t// ADD RENDERER TO CONTAINER\n\t\tcontainer.appendChild(renderer.domElement);\n\n\t\t// ANIMATIONS GO INSIDE\n\t\tfunction render() {\n\t\t\tcamera.lookAt(scene.position);\n\t\t\trenderer.render(scene, camera);\n\t\t}\n\n\t\tfunction animate() {\n\t\t\trequestAnimationFrame(animate);\n\t\t\trender();\n\t\t}\n\t\tanimate();\n\n\t\t// RESIZE CONTAINER\n\t\twindow.addEventListener('resize', onWindowResize, false);\n\t\tfunction onWindowResize() {\n\t\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\t\tcamera.updateProjectionMatrix();\n\t\t\trenderer.setSize(window.innerWidth, window.innerHeight);\n\t\t}\n\t\t\n      },[]);\n\nreturn(\n   null\n)\n\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}